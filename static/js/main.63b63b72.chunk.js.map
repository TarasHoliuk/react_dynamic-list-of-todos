{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","filteredTitle","filteredByStatus","selectHandler","event","value","target","setState","changeHandler","prevProps","prevState","statusFilter","titleFilter","this","props","todos","todoStatusChanger","getSelectedUserId","className","name","type","onChange","map","todo","classNames","completed","checked","onClick","id","title","userId","React","Component","API_URL","loadTodos","a","fetch","response","json","loadUser","CurrentUser","selectedUser","getUser","selectedUserId","currentProps","clearUser","console","log","email","phone","App","visibleTodos","status","currentState","filter","filterFor","includes","todoId","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.63b63b72.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ninterface Props {\n  todos: Todo[];\n  todoStatusChanger: (todoId: number) => void;\n  getSelectedUserId: (selectedUserId: number) => void;\n  statusFilter: (status: string) => void;\n  titleFilter: (filterFor: string) => void;\n}\n\ninterface State {\n  filteredTitle: string;\n  filteredByStatus: string;\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    filteredTitle: '',\n    filteredByStatus: 'all',\n  };\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { statusFilter, titleFilter } = prevProps;\n    const { filteredByStatus, filteredTitle } = this.state;\n\n    if (prevState !== this.state) {\n      statusFilter(filteredByStatus);\n      titleFilter(filteredTitle);\n    }\n  }\n\n  selectHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    this.setState({ filteredByStatus: value });\n  };\n\n  changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    this.setState({ filteredTitle: value });\n  };\n\n  render() {\n    const { todos, todoStatusChanger, getSelectedUserId } = this.props;\n    const { filteredTitle, filteredByStatus } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <form className=\"field\">\n          <div className=\"control mb-3\">\n            <input\n              name=\"todo-title\"\n              type=\"text\"\n              value={filteredTitle}\n              onChange={(event) => this.changeHandler(event)}\n              className=\"input\"\n            />\n          </div>\n\n          <div className=\"control\">\n            <div className=\"select\">\n              <select\n                name=\"todo-filter\"\n                value={filteredByStatus}\n                onChange={(event) => this.selectHandler(event)}\n              >\n                <option value=\"all\">\n                  All\n                </option>\n                <option value=\"active\">\n                  Active\n                </option>\n                <option value=\"completed\">\n                  Completed\n                </option>\n              </select>\n            </div>\n          </div>\n        </form>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onClick={() => todoStatusChanger(todo.id)}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => getSelectedUserId(todo.userId)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const loadTodos = async () => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n\nexport const loadUser = async (userId: number) => {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React from 'react';\nimport { loadUser } from '../../api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  selectedUserId: number | null;\n  clearUser: () => void;\n}\n\ntype State = {\n  selectedUser: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    selectedUser: null,\n  };\n\n  componentDidMount() {\n    this.getUser();\n  }\n\n  componentDidUpdate(currentProps: Props) {\n    if (currentProps.selectedUserId !== this.props.selectedUserId) {\n      this.getUser();\n    }\n  }\n\n  getUser = async () => {\n    let selectedUser: User | null = null;\n\n    if (this.props.selectedUserId) {\n      selectedUser = await loadUser(this.props.selectedUserId);\n    }\n\n    this.setState({ selectedUser });\n  };\n\n  render() {\n    const { clearUser } = this.props;\n    const { selectedUser } = this.state;\n\n    // eslint-disable-next-line no-console\n    console.log(selectedUser);\n\n    return selectedUser && (\n      <div>\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${selectedUser.id}`}</span>\n          </h2>\n          <h3 className=\"CurrentUser__name\">\n            {selectedUser.name}\n          </h3>\n          <p className=\"CurrentUser__email\">\n            {selectedUser.email}\n          </p>\n          <p className=\"CurrentUser__phone\">\n            {selectedUser.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            onClick={() => clearUser()}\n            className=\"button CurrentUser__button\"\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { loadTodos } from './api';\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number | null;\n  visibleTodos: Todo[];\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    visibleTodos: [],\n  };\n\n  async componentDidMount() {\n    const data = await loadTodos();\n\n    this.setState({\n      todos: data,\n      visibleTodos: [...data],\n    });\n  }\n\n  statusFilter = (status: string) => {\n    this.setState((currentState => ({\n      visibleTodos: currentState.todos\n        .filter(todo => {\n          switch (status) {\n            case 'all':\n              return todo;\n\n            case 'active':\n              return !todo.completed;\n\n            case 'completed':\n              return todo.completed;\n\n            default:\n              return todo;\n          }\n        }),\n    })));\n  };\n\n  titleFilter = (filterFor: string) => {\n    this.setState((currentState => ({\n      visibleTodos: currentState.visibleTodos\n        .filter(todo => todo.title.includes(filterFor)),\n    })));\n  };\n\n  getSelectedUserId = (selectedUserId: number) => {\n    this.setState({ selectedUserId });\n  };\n\n  todoStatusChanger = (todoId: number) => {\n    this.setState(currentState => ({\n      todos: currentState.todos.map(todo => {\n        if (todo.id === todoId) {\n          // eslint-disable-next-line no-param-reassign\n          todo.completed = !todo.completed;\n        }\n\n        return todo;\n      }),\n    }));\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const {\n      visibleTodos,\n      selectedUserId,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={visibleTodos}\n            todoStatusChanger={this.todoStatusChanger}\n            getSelectedUserId={this.getSelectedUserId}\n            statusFilter={this.statusFilter}\n            titleFilter={this.titleFilter}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {/* {selectedUserId ? ( */}\n            <CurrentUser selectedUserId={selectedUserId} clearUser={this.clearUser} />\n            {/* ) : 'No user selected'} */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}